name: daily-digest

on:
  schedule:
    - cron: "0 14 * * 1-5"
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: daily-digest
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      FEISHU_WEBHOOK: ${{ secrets.FEISHU_WEBHOOK }}
      FEISHU_SECRET: ${{ secrets.FEISHU_SECRET }}
      EDGAR_USER_AGENT: "daily-messenger/1.0 (mailto:[email protected])"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Playwright
        run: |
          npm install -g playwright
          npx playwright install chromium --with-deps

      - name: Get Farside session
        id: farside
        run: |
          NODE_PATH=$(npm root -g) node - <<'EOF'
          const { chromium } = require('playwright');
          const fs = require('fs');
          (async () => {
            const fallbackUA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36";
            const ua = (process.env.FARSIDE_UA && process.env.FARSIDE_UA.trim()) ? process.env.FARSIDE_UA.trim() : fallbackUA;
            const browser = await chromium.launch();
            const context = await browser.newContext({ userAgent: ua, locale: "en-US" });
            const page = await context.newPage();
            await page.goto("https://farside.co.uk/bitcoin-etf-flow-all-data/", { waitUntil: "domcontentloaded" });
            for (const sel of ["text=Accept", "text=I agree", "text=Continue", "text=OK"]) {
              try {
                await page.click(sel, { timeout: 1500 });
              } catch (error) {
                if (error && error.name !== 'TimeoutError') {
                  throw error;
                }
              }
            }
            await page.waitForTimeout(2500);
            const cookies = (await context.cookies()).filter((cookie) => /farside\.co\.uk$/.test(cookie.domain));
            const cookieHeader = cookies.map((cookie) => `${cookie.name}=${cookie.value}`).join("; ");
            const outputPath = process.env.GITHUB_OUTPUT;
            if (outputPath) {
              fs.appendFileSync(outputPath, `cookies=${cookieHeader}\n`);
              fs.appendFileSync(outputPath, `ua=${ua}\n`);
            }
            await browser.close();
          })().catch((error) => {
            console.error(error);
            process.exit(2);
          });
          EOF

      - name: Export Farside session
        run: |
          echo "FARSIDE_COOKIES=${{ steps.farside.outputs.cookies }}" >> $GITHUB_ENV
          echo "FARSIDE_UA=${{ steps.farside.outputs.ua }}" >> $GITHUB_ENV

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Sync dependencies
        run: uv sync --locked --no-dev

      - name: Guard 07:00–07:10 PT window
        if: ${{ github.event_name == 'schedule' }}
        env:
          TZ: America/Los_Angeles
          WINDOW_START: "0700"
          WINDOW_END: "0710"
        run: |
          now=$(TZ=$TZ date +%H%M)
          if [ "$now" -lt "$WINDOW_START" ] || [ "$now" -gt "$WINDOW_END" ]; then
            echo "当前不在播报窗口，提前结束。"
            exit 0
          fi

      - name: Run ETL
        id: etl
        continue-on-error: true
        env:
          API_KEYS: ${{ secrets.API_KEYS }}
          FARSIDE_COOKIES: ${{ env.FARSIDE_COOKIES }}
          FARSIDE_UA: ${{ env.FARSIDE_UA }}
        run: uv run python -m daily_messenger.etl.run_fetch

      - name: Run scoring
        id: scoring
        continue-on-error: true
        run: uv run python -m daily_messenger.scoring.run_scores

      - name: Render digest
        id: digest
        run: |
          if [ "${{ steps.etl.outcome }}" != "success" ] || [ "${{ steps.scoring.outcome }}" != "success" ]; then
            echo "DEGRADED=1" >> $GITHUB_ENV
            uv run python -m daily_messenger.digest.make_daily --degraded
          else
            uv run python -m daily_messenger.digest.make_daily
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: out

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4

      - name: Push Feishu card
        if: ${{ always() && env.FEISHU_WEBHOOK != '' }}
        run: |
          uv run python -m daily_messenger.tools.post_feishu \
            --webhook "$FEISHU_WEBHOOK" \
            --secret "$FEISHU_SECRET" \
            --summary out/digest_summary.txt \
            --card out/digest_card.json

      - name: Mark failure when pipeline degraded
        if: ${{ steps.etl.outcome != 'success' || steps.scoring.outcome != 'success' }}
        run: exit 1
